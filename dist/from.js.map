{"version":3,"file":"from.js","sourceRoot":"","sources":["../src/from.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,MAAyB,EAAE,EAAE;IACvD,OAAO;QACL,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,MAAM,EAAE,MAAM,CAAC,MAAM;QAErB,SAAS,EAAE,GAAG,EAAE;YACd,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC;QAC5B,CAAC;QACD,MAAM,EAAE,GAAG,EAAE;YACX,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,IAAI,CAAC;oBACH,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;wBACrB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;oBACvB,CAAC,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAIF,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,EAAE,GAAc,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,MAAM,mBAAmB,CAAC,GAAG,CAAC,CAAC;IAC9C,IAAI,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAE9B,MAAM,OAAO,GAAG;QACd,oDAAoD;QACpD,MAAM,EAAE,CAAC,OAAkC,EAAE,EAAE;YAC7C,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YACnB,OAAO,OAAO,CAAC;QACjB,CAAC;QAED,SAAS,EAAE,GAAG,EAAE;YACd,OAAO,GAAG,CAAC,SAAS,EAAE,CAAC;QACzB,CAAC;QACD,MAAM,EAAE,GAAG,EAAE;YACX,OAAO,GAAG,CAAC,MAAM,EAAE,CAAC;QACtB,CAAC;QACD,GAAG,EAAE,CAAI,MAA2B,EAAE,EAAE;YACtC,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;QAED,kBAAkB,EAAE,GAAG,EAAE;YACvB,OAAO,oBAAoB,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC;QAC/C,CAAC;KACF,CAAC;IACF,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { ImageLike } from \"./ImageLike\";\nimport { loadHTMLImageElement } from \"./loadHTMLImageElement\";\nimport { toHTMLCanvasElement } from \"./toHTMLCanvasElement\";\n\nexport const imageHelper = (canvas: HTMLCanvasElement) => {\n  return {\n    width: canvas.width,\n    height: canvas.height,\n\n    toDataURL: () => {\n      return canvas.toDataURL();\n    },\n    toBlob: () => {\n      return new Promise((resolve, reject) => {\n        try {\n          canvas.toBlob((blob) => {\n            return resolve(blob);\n          });\n        } catch (error) {\n          return reject(error);\n        }\n      });\n    },\n  };\n};\n\nexport type ImageJs = ReturnType<typeof imageHelper>;\n\nexport const from = async (src: ImageLike) => {\n  const canvas = await toHTMLCanvasElement(src);\n  let ijs = imageHelper(canvas);\n\n  const builder = {\n    // update: (updater: (img: ImageJs) => ImageJs) => {\n    update: (updater: (img: ImageJs) => ImageJs) => {\n      ijs = updater(ijs);\n      return builder;\n    },\n\n    toDataURL: () => {\n      return ijs.toDataURL();\n    },\n    toBlob: () => {\n      return ijs.toBlob();\n    },\n    get: <T>(getter: (img: ImageJs) => T) => {\n      return getter(ijs);\n    },\n\n    toHtmlImageElement: () => {\n      return loadHTMLImageElement(ijs.toDataURL());\n    },\n  };\n  return builder;\n};\n"]}